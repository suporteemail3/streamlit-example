# -*- coding: utf-8 -*-
"""Estatistisca_Descritiva_Dengue_Recife.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fCbgt7FWIgl2k7V0U2B_FjCNcOyjicC1
"""

import pandas as pd
import plotly.graph_objects as go
import plotly.express as px

import seaborn as sns
import matplotlib.pyplot as plt

main_config = {
    "hovermode": "x unified",
    "legend": {"yanchor":"top", 
                "y":0.9, 
                "xanchor":"left",
                "x":0.1,
                "title": {"text": None},
                "font" :{"color":"white"},
                "bgcolor": "rgba(0,0,0,0.5)"},
    "margin": {"l":0, "r":0, "t":20, "b":0}
}

df = pd.read_csv('recife-dbf.csv', error_bad_lines=False)
df =  df.loc[ df['mês_notificacao'] == 'Jan', 'mês_notificacao'] = 1
df.loc[ df['mês_notificacao'] == 'Fev', 'mês_notificacao'] = 2
df.loc[ df['mês_notificacao'] == 'Mar', 'mês_notificacao'] = 3
df.loc[ df['mês_notificacao'] == 'Abr', 'mês_notificacao'] = 4
df.loc[ df['mês_notificacao'] == 'Mai', 'mês_notificacao'] = 5
df.loc[ df['mês_notificacao'] == 'Jun', 'mês_notificacao'] = 6
df.loc[ df['mês_notificacao'] == 'Jul', 'mês_notificacao'] = 7
df.loc[ df['mês_notificacao'] == 'Ago', 'mês_notificacao'] = 8
df.loc[ df['mês_notificacao'] == 'Set', 'mês_notificacao'] = 9
df.loc[ df['mês_notificacao'] == 'Out', 'mês_notificacao'] = 10
df.loc[ df['mês_notificacao'] == 'Nov', 'mês_notificacao'] = 11
df.loc[ df['mês_notificacao'] == 'Dez', 'mês_notificacao'] = 12

df['ds_semana_notificacao'] = df['ds_semana_notificacao'].astype(int)
df['dia_notificacao'] = df['dia_notificacao'].astype(int)
df['mês_notificacao'] = df['mês_notificacao'].astype(int)

# df['temperatura-mininima'] = df['temperatura-mininima'].str.lstrip('R$ ')
#f['temperatura-mininima'] = df['temperatura-mininima'].astype(int)

# df.loc[df['Status de Pagamento'] == 'Pago', 'Status de Pagamento'] = 1
# df.loc[df['Status de Pagamento'] == 'Não pago', 'Status de Pagamento'] = 0

df['tp_notificacao'] = df['tp_notificacao'].astype(int)

"""#### Casos por febre"""

df1 = df.groupby('ds_semana_notificacao')['febre'].sum().reset_index()

df1

fig1 = go.Figure(go.Bar(
        x=df1['febre'],
        y=df1['ds_semana_notificacao'],
        orientation='h',
        textposition='auto',
        text=df1['febre'],
        insidetextfont=dict(family='Times', size=12)))

fig1.show()

"""#### casos confirmados com médias por ano da semana da notificação

"""

df2 = df.groupby('ano_notificacao')['ds_semana_notificacao'].sum().reset_index()

fig2 = go.Figure(go.Scatter(
    x=df2['ano_notificacao'], y=df2['ds_semana_notificacao'], mode='lines', fill='tonexty'))

fig2.add_annotation(text='Casos Confirmados por Médias por ano  da semana da notificacao',
        xref="paper", yref="paper",
        font=dict(
            size=20,
            color='gray'
            ),
        align="center", bgcolor="rgba(0,0,0,0.8)",
        x=0.05, y=0.85, showarrow=False)
fig2.add_annotation(text=f"Média : {round(df2['ds_semana_notificacao'].mean(), 2)}",
        xref="paper", yref="paper",
        font=dict(
            size=30,
            color='gray'
            ),
        align="center", bgcolor="rgba(0,0,0,0.8)",
        x=0.05, y=0.55, showarrow=False)

"""#### Casos confirmados médias por mês_notificacao"""

df4 = df.groupby('mês_notificacao')['febre'].sum().reset_index()

df4

fig4 = go.Figure(go.Scatter(
    x=df4['mês_notificacao'], y=df4['febre'], mode='lines', fill='tonexty'))

fig4.add_annotation(text='Casos Confirmados por Médias por mês de notificacao por febre',
        xref="paper", yref="paper",
        font=dict(
            size=20,
            color='gray'
            ),
        align="center", bgcolor="rgba(0,0,0,0.8)",
        x=0.05, y=0.85, showarrow=False)
fig4.add_annotation(text=f"Média : {round(df4['febre'].mean(), 2)}",
        xref="paper", yref="paper",
        font=dict(
            size=30,
            color='gray'
            ),
        align="center", bgcolor="rgba(0,0,0,0.8)",
        x=0.05, y=0.55, showarrow=False)

"""#### Casos confirmados pelo codigo municipio no mês com dados notificados"""

df3 = df.groupby(['ds_semana_notificacao', 'mês_notificacao'])['co_municipio_infeccao'].sum().reset_index()

fig3 = px.line(df3, y="co_municipio_infeccao", x="mês_notificacao", color="ds_semana_notificacao")
fig3.show()

"""#### Temperatura em PieChart // talvez botar no msm card pelo codigo bairro atraves dados semana notificado"""

df11 = df.groupby('ds_semana_notificacao')['co_bairro_residencia'].sum().reset_index()

fig11 = go.Figure()
fig11.add_trace(go.Pie(labels=df11['ds_semana_notificacao'], values=df11['co_bairro_residencia'], hole=.7))

"""#### Casos por mês por notificacao + segregação por plaquetas menor"""

df.columns

df5 = df.groupby(['mês_notificacao', 'ds_semana_notificacao'])['plaq_menor'].sum().reset_index()
df5_group = df.groupby('mês_notificacao')['plaq_menor'].sum().reset_index()

fig5 = px.line(df5, y="plaq_menor", x="mês_notificacao", color="ds_semana_notificacao")
fig5.add_trace(go.Scatter(y=df5_group["plaq_menor"], x=df5_group["mês_notificacao"], mode='lines+markers', fill='tonexty', fillcolor='rgba(255, 0, 0, 0.2)', name='Total de Casos por plaquetas menor'))
fig5.show()

"""#### dados confirmados na semana e por ano de notificação """

df6 = df.groupby('ds_semana_notificacao')['notificacao_ano'].sum()

fig6 = go.Figure()
fig6.add_trace(go.Pie(labels=['dasos da semana por notificacao', 'notificacao por ano'], values=df6, hole=.6))
fig6.show()

"""## INDICATORS

#### Indicators - Casos confirmados, atraves de evidencia de dados notificados por ano
"""

df7 = df.groupby(['ds_semana_notificacao', 'evidencia'])['notificacao_ano'].sum()

df7.sort_values(ascending=False, inplace=True)

df7 = df7.reset_index()

df7

fig7 = go.Figure()
fig7.add_trace(go.Indicator(mode='number+delta',
        title = {"text": f"<span style='font-size:150%'>{df7['ds_semana_notificacao'].iloc[0]} - Casos Confirmados</span><br><span style='font-size:70%'>Dengue - em relação a média por ano</span><br>"},
        value = df7['notificacao_ano'].iloc[0],
        number = {'prefix': "Total "},
        delta = {'relative': True, 'valueformat': '.1%', 'reference': df7['notificacao_ano'].mean()}
))

"""##### Nesses cards de indicador, mostrar abaixo os valores dos top 5 - Casos, dengue

[texto do link](https://)#### Indicators - Casos confirmados de dengue
"""

df8 = df.groupby('ds_semana_notificacao')['notificacao_ano'].sum()

df8.sort_values(ascending=False, inplace=True)

df8 = df8.reset_index()

fig8 = go.Figure()
fig8.add_trace(go.Indicator(mode='number+delta',
        title = {"text": f"<span style='font-size:150%'>{df8['ds_semana_notificacao'].iloc[0]} - Casos de Dengue</span><br><span style='font-size:70%'>Casos com notificados- em relação a média</span><br>"},
        value = df8['notificacao_ano'].iloc[0],
        number = {'prefix': "Total "},
        delta = {'relative': True, 'valueformat': '.1%', 'reference': df8['notificacao_ano'].mean()}
))

"""#### Indicators - Casos confirmados"""

fig9 = go.Figure()
fig9.add_trace(go.Indicator(mode='number',
        title = {"text": f"<span style='font-size:150%'>Casos Notificados</span><br><span style='font-size:70%'>no Ano</span><br>"},
        value = df['notificacao_ano'].sum(),
        number = {'prefix': "Total "}
))

df.columns

"""[texto do link](https://)#### Indicators - Total por sangramentos media"""

fig10 = go.Figure()
fig10.add_trace(go.Indicator(mode='number',
        title = {"text": f"<span style='font-size:150%'>Média por Sangramento</span>"},
        value = len(df[df['sangram'] == 1])
))

"""#### Casos de sintomas por dengue no ano notificado por bairro"""

df12 = df.groupby(['ds_semana_notificacao', 'gengivo', 'metro', 'petequias', 'hematura', 'sangram', 'plaq_menor', 'evidencia', 'no_bairro_infeccao'])['notificacao_ano'].sum().reset_index()

df13 = df.groupby(['ds_semana_notificacao', 'no_bairro_infeccao',])['notificacao_ano'].sum()

df13 = df13.sort_values(ascending=False)

df13 = df13.groupby('ds_semana_notificacao').head(1).reset_index()

df13

"""#### Chuvas + Casos por temperatura - BarChart"""

fig14 = go.Figure(go.Bar(x=df13['notificacao_ano'], y=df13['no_bairro_infeccao'], textposition='auto', text=df13['no_bairro_infeccao']))

fig14.show()

# Módulo 1 - Medidas de tendência central
# Media aritmética desta coluna petal_length
df13['notificacao_ano'].mean()

# Moda a que tem as maiores frequencia retornando duas moda
df13['notificacao_ano'].mode()

# Mediana é que ocupa o valor central de nossos dados
df13['notificacao_ano'].median()

# Módulo 2 - Mediads Separatrizes - fazem a divisão de nosso conjunto de dados
df13['notificacao_ano'].describe()

#       25%        50%        75%        max
# 4.3 <----> 5.1 <----> 5.8 <----> 6.4 <-----> 7.9
# 1ºquartil= Q1=25% 
# 2ºquartil= Q2=Md = 50%
# 3ºquartil= Q3 = 75%
# vamos utilizar o grafico do boxplot para melhor visualização
sns.boxplot( df13['notificacao_ano'] )

# Módulo 3 - Medidas de dispersão - medidas de tendência central 
# Amplitude Total
df13['notificacao_ano'].max() - df13['notificacao_ano'].min()

# Amplitude Interquartilica
df13['notificacao_ano'].describe()

df13['notificacao_ano'].describe()[6:7]

df13['notificacao_ano'].describe()[6:7].values

df13['notificacao_ano'].describe()[6:7].values - df13['notificacao_ano'].describe()[4:5].values

# Amplitude semi-interquartilica é anterior dividido por 2
(df13['notificacao_ano'].describe()[6:7].values - df13['notificacao_ano'].describe()[4:5].values) / 2

# Variância
df13['notificacao_ano'].var()

# Desvio padrão
df13['notificacao_ano'].std()



# Modulo 3 Medidas de dispersão
#Amplitude total
df13['notificacao_ano'].max() - df13['notificacao_ano'].min()

# Variância uma medida de dispersão que mostra quão distates os valores estão da média
df13['notificacao_ano'].var()

#Desvio padrão é simplesmente o resultado positivo da raiz quadrada da variância
df13['notificacao_ano'].std() # praticamente raiz quadrada variançia

#Medidas de Assimetria é distribuição deos dados
# Simpetrica se média = mediana = moda ou As = 0
# Assimpetrica negativa se média < e igual mediana < e igual média ou As > 0
# Assimétrica positiva se moda < igual mediana < e igual média ou As > 0
df13['notificacao_ano'].skew()

sns.kdeplot(df13['notificacao_ano']);

#Medidas de Curtose é o grau de achatamento da distribuição 
#Leptocúrtica: qdo a distrib.apresenta uma cruva mais longo de frequencia bastante fechada, com os dados fortemente concentrados em torno de seu centro, k<0,263
#Mesocúrtica:quando os dados estão razoavelmente concentrados em torno de seu centro, K=0,263
#Platicúrtica: quando a distribuição apresenta uma curva de frequência mais aberta, com os dados fracamente concentrados em torno de seu centro, K>0,163
df13['notificacao_ano'].kurtosis()

#Modulo 4 - Correlação
# correlação de Pearson
#o coeficiente pode ter um intervalo de valores de +1 a -1 um valor de 0 indica que não fá associação entre as duas variáveis. um valor maior qu e 0 indica uma associação positiva
df13.corr()



sns.heatmap( df13.corr(), annot=True )

sns.scatterplot( data=df13, x='no_bairro_infeccao', y='notificacao_ano')

df1.columns

sns.scatterplot( data=df1, x='ds_semana_notificacao', y='febre')

# Nulos
df13.isnull().sum()

# Nulos Plot
plt.figure( figsize=(14,5) )
plt.title('Análise de campos nulos')
sns.heatmap( df13.isnull(), cbar=False );

df.info()

df.columns

# analise por caso Dengue
Analise_03 = df.groupby( by=['ano_notificacao'] ).sum().reset_index()[['ano_notificacao', 'ds_semana_notificacao']].sort_values( 'ds_semana_notificacao', ascending=False )
Analise_03.head()

# Tamanho
plt.figure( figsize=(12, 5) )

# Grafico
plt.title( 'Periodo com maior número de casos', loc='left', fontsize=14 )

# Grafico
plt.bar( Analise_03.ano_notificacao, Analise_03['ds_semana_notificacao'], color='#f44e3f' )

# Labels
plt.ylabel('Quantidade')
plt.xticks( rotation=90 );

# Campos unicos

df.nunique()



# analise por data das chuvas
Analise = df.groupby( by=['dt_notificacao'] ).sum().reset_index()

Analise.head()

# Tamanho
plt.figure( figsize=(12, 5) )

# Style
plt.style.use('ggplot')

# Grafico
plt.title( 'Total dados cados da semana em recife: no Periodo por data de notificação', loc='left', fontsize=14 )
sns.lineplot( data=Analise, x='dt_notificacao', y='ds_semana_notificacao', estimator='sum', lw=2, color='#ff5555', alpha=0.85 );

# Labels
plt.xlabel('Quantidade')
plt.ylabel('Período');

df13.columns

# analise por data dos chuvas
Analise = df.groupby( by=['ds_semana_notificacao'] ).sum().reset_index()

Analise.head()

# Tamanho
plt.figure( figsize=(12, 5) )

# Style
plt.style.use('ggplot')

# Grafico
plt.title( 'Total dados da semana notificados po ano de notificação', loc='left', fontsize=14 )
sns.lineplot( data=Analise, x='ds_semana_notificacao', y='ano_notificacao', estimator='sum', lw=2, color='#ff5555', alpha=0.85 );

# Labels
plt.xlabel('Quantidade')
plt.ylabel('Total');

# analise por ano das chuva
Analise_04 = df.groupby( by=['notificacao_ano'] ).sum().reset_index()[['notificacao_ano', 'febre']].sort_values( 'febre', ascending=False )
Analise_04.head()

# Tamanho
plt.figure( figsize=(12, 5) )

# Grafico
plt.title( 'periodo com maior número de febre', loc='left', fontsize=14 )

# Grafico
plt.bar( Analise_04.notificacao_ano, Analise_04['febre'], color='#f44e3f' )

# Labels
plt.ylabel('Quantidade')
plt.xticks( rotation=90 );

import plotly.graph_objects as go
import plotly.express as px
from plotly.subplots import make_subplots
from datetime import datetime
from plotly.offline import plot, iplot, init_notebook_mode
init_notebook_mode(connected=True)

#ploting the volume of rain in each month since 1998
fig1 = make_subplots(specs=[[{"secondary_y": True}]])
fig1.add_trace(go.Scatter(x = df['dt_notificacao'],y = df['ds_semana_notificacao'],name = 'Febre mm/ mês'),secondary_y = False)
fig1.add_trace(go.Bar(x = df['dt_notificacao'],y = df['notificacao_ano'],name = 'Casos Dengue'),secondary_y = True)
fig1.update_layout(
    yaxis = dict(
        title = 'dados da semana notificado mm'
    ),
    yaxis2 = dict(
        title  = 'Casos de dengue'
    ),
    title_text="Dados da semana notificados de dengue em Recife/SP"
)
sns.kdeplot(df['ds_semana_notificacao']);